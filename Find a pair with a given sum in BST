#include <bits/stdc++.h> 
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
class BSTiterator
{
    stack<BinaryTreeNode<int> *> st;
    bool reverse;
    BinaryTreeNode<int> *root;
    void pushNodes() {
        while(this->root) {
            st.push(this->root);
            if(this->reverse) {
                this->root = this->root->right;
            }
            else {
                this->root = this->root->left;
            }
        }
    }
public:
    BSTiterator(BinaryTreeNode<int> *root, bool reverse)
    {
        this->root = root;
        this->reverse = reverse;
    }

    int next()
    {
        if(this->root) {
            pushNodes();
        }
        this->root = st.top();
        st.pop();
        int ans = this->root->data;
        this->root = (reverse) ? this->root->left : this->root->right;
        return ans;
    }
};
bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    BSTiterator *left_iterator = new BSTiterator(root, false);
    BSTiterator *right_iterator = new BSTiterator(root, true);
    int left_val = left_iterator->next();
    int right_val = right_iterator->next();
    while(left_val < right_val) {
        if(left_val + right_val == k) return true;
        if(left_val + right_val > k) {
            right_val = right_iterator->next();
        }
        else {
            left_val = left_iterator->next();
        }
    }
    return false;
}
