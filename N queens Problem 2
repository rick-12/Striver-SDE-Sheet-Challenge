void helper(vector<vector<int>>& board, vector<vector<int>>& ans, int row, vector<bool>& upperColumn, vector<bool>& leftDiagonal, vector<bool>& rightDiagonal) {
    int n = board.size();
    if(row == n) {
        ans.push_back({});
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                ans.back().push_back(board[i][j]);
            }
        }
        return;
    }
    for(int col = 0; col < n; col++) {
        if(upperColumn[col] or leftDiagonal[(n - 1) + (col - row)] or rightDiagonal[row + col]) continue;
        board[row][col] = 1;
        upperColumn[col] = true;
        leftDiagonal[(n - 1) + (col - row)] = true;
        rightDiagonal[row + col] = true;
        helper(board, ans, row + 1, upperColumn, leftDiagonal, rightDiagonal);
        board[row][col] = 0;
        upperColumn[col] = false;
        leftDiagonal[(n - 1) + (col - row)] = false;
        rightDiagonal[row + col] = false;
    }
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> board(n, vector<int>(n, 0));
    vector<vector<int>> ans;
    vector<bool> upperColumn(n, false);
    vector<bool> leftDiagonal((2 * n - 1), false);
    vector<bool> rightDiagonal((2 * n - 1), false);
    helper(board, ans, 0, upperColumn, leftDiagonal, rightDiagonal);
    return ans;
}
