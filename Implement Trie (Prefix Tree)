/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class Node {
public:
    Node **arr;
    bool flag;
    Node() {
        arr = new Node*[26]{};
        flag = false;
    }
};
class Trie {
    Node *root;
public:

    /** Initialize your data structure here. */
    Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        int n = word.length();
        Node *curr = root;
        for(int i = 0; i < n; i++) {
            int index = word[i] - 'a';
            if(curr->arr[index] == NULL) {
                curr->arr[index] = new Node();
            }
            curr = curr->arr[index];
        }
        curr->flag = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        int n = word.length();
        Node *curr = root;
        for(int i = 0; i < n; i++) {
            int index = word[i] - 'a';
            if(curr->arr[index] == NULL) {
                return false;
            }
            curr = curr->arr[index];
        }
        return curr->flag;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        int n = prefix.length();
        Node *curr = root;
        for(int i = 0; i < n; i++) {
            int index = prefix[i] - 'a';
            if(curr->arr[index] == NULL) {
                return false;
            }
            curr = curr->arr[index];
        }
        return true;
    }
};
