#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
TreeNode<int> *buildBinaryTreeHelper(vector<int> &preorder, vector<int> &inorder, int low1, int high1, int low2, int high2, unordered_map<int, int>& hashMap) {
    if(low1 > high1) {
        return NULL;
    }
    int mid = hashMap[preorder[low1]];
    TreeNode<int> *root = new TreeNode<int>(inorder[mid]);
    int n = mid - low2;
    root->left = buildBinaryTreeHelper(preorder, inorder, low1 + 1, low1 + n, low2, mid - 1, hashMap);
    root->right = buildBinaryTreeHelper(preorder, inorder, low1 + n + 1, high1, mid + 1, high2, hashMap);
    return root;
}

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
    unordered_map<int, int> hashMap;
    int n = inorder.size();
    for(int i = 0; i < n; i++) {
        hashMap[inorder[i]] = i;
    }
    return buildBinaryTreeHelper(preorder, inorder, 0, n - 1, 0, n - 1, hashMap);
}
