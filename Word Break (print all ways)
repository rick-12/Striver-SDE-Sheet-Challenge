#include <bits/stdc++.h>
class Node {
public:
    Node **arr;
    bool flag;
    Node() {
        arr = new Node*[26]{};
        flag = false;
    }
};
class Trie {
    Node *root;
public:

    /** Initialize your data structure here. */
    Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        int n = word.length();
        Node *curr = root;
        for(int i = 0; i < n; i++) {
            int index = word[i] - 'a';
            if(curr->arr[index] == NULL) {
                curr->arr[index] = new Node();
            }
            curr = curr->arr[index];
        }
        curr->flag = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        int n = word.length();
        Node *curr = root;
        for(int i = 0; i < n; i++) {
            int index = word[i] - 'a';
            if(curr->arr[index] == NULL) {
                return false;
            }
            curr = curr->arr[index];
        }
        return curr->flag;
    }
};
void helper(string &s, Trie *trie, vector<string> &ans, string &t, int index, int n) {
    if(index == n) {
        if(t.length() > 0)
            t.pop_back();
        ans.push_back(t);
        return;
    }
    string str = "";
    for(int i = index; i < n; i++) {
        str.push_back(s[i]);
        if(trie->search(str)) {
            string dup_t = t + str + " ";
            helper(s, trie, ans, dup_t, i + 1, n);
        }
    }
}
vector<string> wordBreak(string &s, vector<string> &dictionary)
{
    Trie *trie = new Trie();
    for(string &word: dictionary) {
        trie->insert(word);
    }
    string t = "";
    int n = s.length();
    vector<string> ans;
    helper(s, trie, ans, t, 0, n);
    return ans;
}
