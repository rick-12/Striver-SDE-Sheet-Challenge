void dfs(vector<vector<int>>& adj, int node, vector<bool>& vis, vector<int>& v) {
    vis[node] = true;
    v.push_back(node);
    for(int child: adj[node]) {
        if(!vis[child]) {
            dfs(adj, child, vis, v);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<vector<int>> ans;
    vector<vector<int>> adj(V, vector<int>());
    for(auto& it: edges) {
        adj[it[0]].push_back(it[1]);
        adj[it[1]].push_back(it[0]);
    }
    vector<bool> vis(V, false);
    for(int i = 0; i < V; i++) {
        if(!vis[i]) {
            vector<int> v;
            dfs(adj, i, vis, v);
            sort(v.begin(), v.end());
            ans.push_back(v);
        }
    }
    return ans;
}
