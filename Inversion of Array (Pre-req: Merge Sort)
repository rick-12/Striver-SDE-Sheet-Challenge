#include <bits/stdc++.h>
void merge(long long *arr, int low, int mid, int high, long long& ans) {
    int m = mid - low + 1, n = high - mid;
    long long a[m + n];
    int i = low, j = mid + 1, k = 0;
    while(i <= mid and j <= high) {
        if(arr[j] < arr[i]) {
            ans += mid + 1 - i;
            a[k] = arr[j];
            j++;
        } else {
            a[k] = arr[i];
            i++;
        }
        k++;
    }
    while(i <= mid) {
        a[k] = arr[i];
        i++;
        k++;
    }
    while(j <= high) {
        a[k] = arr[j];
        j++;
        k++;
    }
    for(int i = low; i <= high; i++) {
        arr[i] = a[i - low];
    }
}
void mergeSort(long long *arr, int low, int high, long long& ans) {
    if(low == high) return;
    int mid = low + (high - low) / 2;
    mergeSort(arr, low, mid, ans);
    mergeSort(arr, mid + 1, high, ans);
    merge(arr, low, mid, high, ans);
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    long long ans = 0LL;
    mergeSort(arr, 0, n - 1, ans);
    return ans;
}
