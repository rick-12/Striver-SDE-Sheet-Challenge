#include<bits/stdc++.h>
vector<vector<int>> movements = {
  {0, 1},
  {1, 0},
  {-1, 0},
  {0, -1},
  {1, -1},
  {1, 1},
  {-1, 1},
  {-1, -1} 
};
void bfs(int** arr, vector<vector<bool>>& vis, int i, int j, int n, int m) {
   queue<pair<int, int>> q;
   q.push(make_pair(i, j));
   vis[i][j] = true;
   while(!q.empty()) {
      int x = q.front().first;
      int y = q.front().second;
      q.pop();
      for(auto& it: movements) {
         int childX = x + it[1];
         int childY = y + it[0];
         if(childX >= 0 and childX < n and childY >= 0 and childY < m and arr[childX][childY] and !vis[childX][childY]) {
            vis[childX][childY] = true;
            q.push(make_pair(childX, childY));
         }
      }
   }
}
int getTotalIslands(int** arr, int n, int m)
{
   vector<vector<bool>> vis(n, vector<bool>(m, false));
   int ans = 0;
   for(int i = 0; i < n; i++) {
      for(int j = 0; j < m; j++) {
         if(!arr[i][j] or vis[i][j]) continue;
         bfs(arr, vis, i, j, n, m);
         ans++;
      }
   }
   return ans;
}
