#include <bits/stdc++.h>
class DisjointSet {
	vector<int> parent, size;
public:
	DisjointSet(int n) {
		parent.resize(n + 1);
		size.resize(n + 1, 1);
		for(int i = 0; i <= n; i++) {
			parent[i] = i;
		}
	}
	int findParent(int node) {
		if(parent[node] == node) return node;
		return parent[node] = findParent(parent[node]);
	}
	void unionBySize(int u, int v) {
		if(size[u] < size[v]) {
			parent[u] = v;
			size[v] += size[u];
		}
		else {
			parent[v] = u;
			size[u] += size[v];
		}
	}
};
bool sortcol(const vector<int>& v1, const vector<int>& v2)
{
    return v1[2] < v2[2];
}
int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	sort(graph.begin(), graph.end(), sortcol);
	DisjointSet ds(n);
	int ans = 0;
	for(auto& it: graph) {
		int ulp_u = ds.findParent(it[0]);
		int ulp_v = ds.findParent(it[1]);
		if(ulp_u != ulp_v) {
			ans += it[2];
			ds.unionBySize(ulp_u, ulp_v);
		}
	}
	return ans;
}
