bool isSafe(vector<vector<int>>& board, int row, int col, int n) {
    int i = row - 1, j;
    while(i >= 0) {
        if(board[i][col]) {
            return false;
        }
        i--;
    }
    i = row - 1, j = col - 1;
    while(i >= 0 and j >= 0) {
        if(board[i][j]) {
            return false;
        }
        i--;
        j--;
    }
    i = row - 1, j = col + 1;
    while(i >= 0 and j < n) {
        if(board[i][j]) {
            return false;
        }
        i--;
        j++;
    }
    return true;
}
void helper(vector<vector<int>>& board, vector<vector<int>>& ans, int row) {
    int n = board.size();
    if(row == n) {
        ans.push_back({});
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                ans.back().push_back(board[i][j]);
            }
        }
        return;
    }
    for(int col = 0; col < n; col++) {
        board[row][col] = 1;
        if(isSafe(board, row, col, n)) {
            helper(board, ans, row + 1);
        }
        board[row][col] = 0;
    }
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> board(n, vector<int>(n, 0));
    vector<vector<int>> ans;
    helper(board, ans, 0);
    return ans;
}
